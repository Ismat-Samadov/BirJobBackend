generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id               Int                @id @default(autoincrement())
  slug             String             @unique
  title            String
  excerpt          String
  content          String
  author           String
  authorImage      String
  authorBio        String
  authorRole       String
  date             DateTime
  readTime         String
  category         String
  coverImage       String
  featured         Boolean            @default(false)
  trendingScore    Int                @default(0)
  viewCount        Int                @default(0)
  likeCount        Int                @default(0)
  commentCount     Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  BlogPostRelation BlogPostRelation[]
  BlogPostTag      BlogPostTag[]
}

model BlogPostRelation {
  id            Int      @id @default(autoincrement())
  blogPostId    Int
  relatedPostId Int
  BlogPost      BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, relatedPostId])
}

model BlogPostTag {
  id         Int      @id @default(autoincrement())
  name       String
  blogPostId Int
  BlogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, name])
}

model contactSubmissions {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  ip        String?
  userAgent String?
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model jobs_jobpost {
  id            Int             @id @default(autoincrement())
  title         String
  company       String
  apply_link    String
  source        String?
  created_at    DateTime        @default(now())
  notifications notifications[]

  @@unique([title, company, apply_link])
}

model keywords {
  id        Int      @id @default(autoincrement())
  keyword   String
  userId    Int
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyword])
}

model notifications {
  id             Int          @id @default(autoincrement())
  userId         Int
  jobId          Int
  sentAt         DateTime     @default(now())
  matchedKeyword String
  isRead         Boolean      @default(false)
  jobs_jobpost   jobs_jobpost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  users          users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([userId])
}

model scraper_errors {
  id        Int      @id @default(autoincrement())
  source    String
  error     String
  timestamp DateTime @default(now())
}

model search_logs {
  id               Int       @id @default(autoincrement())
  query            String
  timestamp        DateTime  @default(now())
  battery          Float?
  browser          String?
  browserVersion   String?
  city             String?
  clickedResult    Boolean   @default(false)
  colorDepth       Int?
  connectionSpeed  String?
  connectionType   String?
  country          String?
  deviceModel      String?
  deviceType       String?
  deviceVendor     String?
  entryPage        String?
  filterTypes      String?
  hasFilters       Boolean   @default(false)
  ip               String?
  isRefinement     Boolean   @default(false)
  isRetry          Boolean   @default(false)
  landingTime      DateTime?
  language         String?
  operatingSystem  String?
  osVersion        String?
  pageViews        Int?
  path             String?
  previousQuery    String?
  queryPosition    Int?
  referrer         String?
  referrerDomain   String?
  referrerPath     String?
  referrerProtocol String?
  referrerQuery    String?
  referrerSource   String?
  region           String?
  resultCount      Int?
  screenHeight     Int?
  screenWidth      Int?
  searchDuration   Int?
  searchEndTime    DateTime?
  searchKeywords   String?
  searchSource     String?
  searchStartTime  DateTime?
  searchType       String?
  sessionDuration  Int?
  sessionId        String?
  sortBy           String?
  timezone         String?
  userAgent        String?
  userId           Int?
  utmCampaign      String?
  utmContent       String?
  utmMedium        String?
  utmSource        String?
  utmTerm          String?
  viewportHeight   Int?
  viewportWidth    Int?
  visitorId        String?
  users            users?    @relation(fields: [userId], references: [id])

  @@index([country, city])
  @@index([deviceType])
  @@index([ip])
  @@index([query])
  @@index([referrerSource])
  @@index([resultCount])
  @@index([searchSource])
  @@index([sessionId])
  @@index([timestamp])
  @@index([userId])
  @@index([utmSource, utmMedium, utmCampaign])
  @@index([visitorId])
}

model sourcePreferences {
  id        Int      @id @default(autoincrement())
  userId    Int
  source    String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, source])
}

model users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  lastNotifiedAt    DateTime?
  keywords          keywords[]
  notifications     notifications[]
  search_logs       search_logs[]
  sourcePreferences sourcePreferences[]
}

model visitor_logs {
  id               Int       @id @default(autoincrement())
  ip               String?
  userAgent        String?
  browser          String?
  browserVersion   String?
  operatingSystem  String?
  osVersion        String?
  deviceType       String?
  deviceVendor     String?
  deviceModel      String?
  country          String?
  city             String?
  region           String?
  timezone         String?
  language         String?
  referrer         String?
  path             String?
  query            String?
  screenWidth      Int?
  screenHeight     Int?
  colorDepth       Int?
  viewportWidth    Int?
  viewportHeight   Int?
  connectionType   String?
  connectionSpeed  String?
  battery          Float?
  sessionId        String?
  previousVisitId  Int?
  timestamp        DateTime  @default(now())
  referrerDomain   String?
  referrerPath     String?
  referrerQuery    String?
  referrerProtocol String?
  referrerSource   String?
  searchKeywords   String?
  utmSource        String?
  utmMedium        String?
  utmCampaign      String?
  utmContent       String?
  utmTerm          String?
  entryPage        String?
  visitorId        String?
  landingTime      DateTime?

  @@index([ip])
  @@index([referrerSource])
  @@index([sessionId])
  @@index([timestamp])
  @@index([utmSource, utmMedium, utmCampaign])
  @@index([visitorId])
}


