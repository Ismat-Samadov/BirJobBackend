# =============================================================================
# BirJob Mobile Backend - Docker Compose Configuration
# =============================================================================

version: '3.8'

# =============================================================================
# SERVICES
# =============================================================================
services:
  
  # =============================================================================
  # API Service - Main Backend Application
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_VERSION: ${BUILD_VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: birjob-api
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - APPLE_TEAM_ID=${APPLE_TEAM_ID}
      - APPLE_KEY_ID=${APPLE_KEY_ID}
      - APPLE_PRIVATE_KEY=${APPLE_PRIVATE_KEY}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - api_uploads:/app/uploads
    networks:
      - birjob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.birjob-api.rule=Host(`api.birjob.az`)"
      - "traefik.http.routers.birjob-api.tls=true"
      - "traefik.http.routers.birjob-api.tls.certresolver=letsencrypt"

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: birjob-postgres
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-birjob}
      POSTGRES_USER: ${DB_USER:-birjob}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - birjob-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-birjob} -d ${DB_NAME:-birjob}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: birjob-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - birjob-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # Nginx Reverse Proxy (Optional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: birjob-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - birjob-network
    labels:
      - "traefik.enable=false"

  # =============================================================================
  # Monitoring - Prometheus (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: birjob-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - birjob-network
    profiles:
      - monitoring

  # =============================================================================
  # Monitoring - Grafana (Optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: birjob-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=http://grafana.birjob.az
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - birjob-network
    profiles:
      - monitoring

  # =============================================================================
  # Log Management - Elasticsearch (Optional)
  # =============================================================================
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: birjob-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - birjob-network
    profiles:
      - logging

  # =============================================================================
  # Log Management - Kibana (Optional)
  # =============================================================================
  kibana:
    image: kibana:8.8.0
    container_name: birjob-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - birjob-network
    profiles:
      - logging

  # =============================================================================
  # Development Services
  # =============================================================================
  
  # API Development Service
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: birjob-api-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://birjob:${DB_PASSWORD}@postgres:5432/birjob
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - birjob-network
    profiles:
      - development

  # Database Admin - pgAdmin (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: birjob-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@birjob.az}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - birjob-network
    profiles:
      - development

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  birjob-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
#
# Development (with live reload):
# docker-compose --profile development up api-dev postgres redis pgadmin
#
# Production:
# docker-compose up -d api postgres redis nginx
#
# With monitoring:
# docker-compose --profile monitoring up -d
#
# With logging:
# docker-compose --profile logging up -d
#
# Full stack:
# docker-compose --profile development --profile monitoring --profile logging up -d
#
# Scale API service:
# docker-compose up -d --scale api=3
#
# View logs:
# docker-compose logs -f api
#
# Execute commands:
# docker-compose exec api npm run prisma:studio
# docker-compose exec postgres psql -U birjob -d birjob
# docker-compose exec redis redis-cli
#
# Backup database:
# docker-compose exec postgres pg_dump -U birjob birjob > backup.sql
#
# Restore database:
# docker-compose exec -T postgres psql -U birjob birjob < backup.sql
#
# =============================================================================